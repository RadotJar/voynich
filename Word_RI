import os
import statistics
import numpy as np
import argparse
import math
import statistics
import matplotlib as plott

def main() :
    #input = get_input()
    filePath = "./test.txt"
    fileName = os.path.basename(filePath)
    with open(filePath, "r") as file:
        input_lines = file.readlines()

    text = format_text(input_lines)
    #Dummy
    x = True

    list_of_spacings_list = []
    spacings_list = []
    numbers = ['0','1','2','3','4','5','6','7','8','9']


    # list of lists for all word spacings (1 text)
    if (x == True) :
        spacings_list = word_spacings_all(text)
        results(spacings_list)

    # Works for all texts
    else :
        spacings_list = word_spacings_all(text)
        list_of_spacings_list.append(spacings_list)
        plot_multiple(list_of_spacings_list)


def word_spacings_all(text : list, classification: list) :
    unique_strings = []
    interval_current = 0
    spacings_all, spacings_num, spacings_word = [], [], []
    intervals = []
    current_string = ""
    characters_recurring = {}

    for i in range(len(text)):
        if text[i] not in unique_strings:
            unique_strings.append(text[i])
            current_string = text[i]

        for j in range(len(text)):
            if text[j] == current_string:
                intervals.append(interval_current)
                interval_current = 0

                # find characters that exist in recurring words
                for char in text[j] :
                    if char not in characters_recurring :
                        characters_recurring[char] = 1
                    else :
                        characters_recurring[char] += 1

            else :
                interval_current += 1
        
        spacings_all.append(interval_current)

        if (classification[i] == "Number"):
            spacings_num.append(interval_current)
        else :
            spacings_word.append(interval_current)
    
    return spacings_all, spacings_num, spacings_word, 


def results(fileName, spacings, WR_characters :dict) :
    std_norm = []

    for space in spacings :
        ave = statistics.mean(space)
        std = statistics.stdev(space)
        std_norm.append(std/ave)
    
    std_norm.sort(reverse=True)
    characters, WRC_val = [], []

    characters = sorted(WR_characters, key=WR_characters.get)

    for c in characters :
        WRC_val.append(WR_characters[c])

    WRI = plott.figure()
    plott.plot(range(len(std_norm)), std_norm)
    plott.xlabel("Rank of Recurring Words Basedon on Standard Deviation (log)")
    plott.ylabel("Normalised Standard Deviation")
    plott.set_xscale('log')
    plott.title("Standard deviation of Recurring Words VS Most Varied Intervals")
    plott.savefig("./WRI_figures/" + fileName +"_WRI.png")

    WRC = plott.figure()
    plott.bar(range(len(WRC_val)), WRC_val)
    plott.xlabel("Recurring Characters")
    plott.ylabel("Number of ocurrences")
    plott.xticks(range(len(WRC_val)), label=characters)
    plott.title("Most Recurring Characters in " + fileName)
    plott.savefig("./WRC_figures/" + fileName +"_WRC.png")    

def plot_multiple(directory, spacings) :

    std_norm = []
    for space in spacings :
        ave = statistics.mean(space)
        std = statistics.stdev(space)
        std_norm.append(std/ave)
    
    std_norm.sort(reverse=True)
   
    plott.plot(range(len(std_norm)), std_norm)
    plott.xlabel("Rank of Recurring Words")
    plott.ylabel("Normalised Standard Deviation")
    plott.set_xscale('log')
    plott.title("Standard deviation of Recurring Words VS Most Varied Intervals")
    plott.legend()
    plott.savefig("./WRI_figures/" + fileName +"_WRI.png") 

def format_text(text) :
    
    formatted, formatted_text = [], []
    file = open(text, 'r')
    text = file.readlines()
    file.close()

    for line_no in range(len(text)):
        formatted.append(text[line_no].replace("\n",""))
        formatted[line_no] = formatted[line_no].split(" ")

    for line in formatted : 
        for string in line:
            formatted_text.append(string) 
        
    return formatted_text


def get_input():
    parser = argparse.ArgumentParser(description="Hidden Markov Model Text Analyser.", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("text_path", help="The path to the directory of text to analyse.")
    args = parser.parse_args()
    input = vars(args)
    return input

if __name__ == "__main__":
    main()